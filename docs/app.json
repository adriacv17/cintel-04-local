[{"name": "app.py", "content": "\nimport plotly.express as px\nfrom shiny.express import input, ui\nfrom shiny import render, reactive\nfrom shinywidgets import render_plotly\nimport pandas as pd\nimport seaborn as sns\nimport palmerpenguins  # This package provides the Palmer Penguins dataset\n\n# Use the built-in function to load the Palmer Penguins dataset\npenguins_df = palmerpenguins.load_penguins()\n\n# added title to main page\nui.page_opts(title=\"Adrian's Penguin Data\", fillable=True)\n\n# Use ui.input_selectize() to create a dropdown input to choose a column\nwith ui.sidebar(open=\"open\"):\n    ui.h2(\"Sidebar\")\n    ui.input_selectize(\n        \"selected_attribute\",\n        \"select attribute for all\",\n        [\"bill_length_mm\", \"bill_depth_mm\", \"flipper_length_mm\", \"body_mass_g\"],\n    )\n\n    # Add a second selectize to make scatterplot interactive\n    ui.input_selectize(\n        \"second_selected_attribute\",\n        \"select scatterplot attribute #2\",\n        [\"bill_length_mm\", \"bill_depth_mm\", \"flipper_length_mm\", \"body_mass_g\"],\n    )\n\n    # Use ui.input_numeric() to create a numeric input for the number of Plotly histogram bins\n    ui.input_numeric(\"plotly_bin_count\", \"plotly bin count\", 40)\n\n    # Use ui.input_slider() to create a slider input for the number of Seaborn bins\n    ui.input_slider(\"seaborn_bin_count\", \"seaborn bin count\", 1, 40, 20)\n\n    # Use ui.input_checkbox_group() to create a checkbox group input to filter the species\n    ui.input_checkbox_group(\n        \"selected_species_list\",\n        \"select species\",\n        [\"Adelie\", \"Gentoo\", \"Chinstrap\"],\n        selected=[\"Adelie\"],\n        inline=True,\n    )\n\n    # Use ui.hr() to add a horizontal rule to the sidebar\n    ui.hr()\n\n    # Use ui.a() to add a hyperlink to the sidebar\n    ui.a(\n        \"Adrian's GitHub Repo\",\n        href=\"https://github.com/adriacv17/cintel-02-data/blob/main/app.py\",\n        target=\"_blank\",\n    )\n\n# create a layout to include 2 cards with a data table and data grid\nwith ui.layout_columns():\n    with ui.card(full_screen=True):  # full_screen option to view expanded table/grid\n        ui.h2(\"Penguin Data Table\")\n\n        @render.data_frame\n        def penguins_datatable():\n            return render.DataTable(filtered_data())\n\n    with ui.card(full_screen=True):  # full_screen option to view expanded table/grid\n        ui.h2(\"Penguin Data Grid\")\n\n        @render.data_frame\n        def penguins_datagrid():\n            return render.DataGrid(filtered_data())\n\n\n# added a horizontal rule\nui.hr()\n\n# create a layout to include 3 cards with different plots\nwith ui.layout_columns():\n    with ui.card(full_screen=True):\n        ui.h2(\"Species Plotly Histogram\")\n\n        @render_plotly\n        def plotly_histogram():\n            return px.histogram(\n                filtered_data(),\n                x=input.selected_attribute(),\n                nbins=input.plotly_bin_count(),\n                color=\"species\",\n            )\n\n    with ui.card(full_screen=True):\n        ui.h2(\"Seaborn Histogram\")\n\n        @render.plot(alt=\"Species Seaborn Histogram\")\n        def seaborn_histogram():\n            seaborn_plot = sns.histplot(\n                data=filtered_data(),\n                x=input.selected_attribute(),\n                bins=input.seaborn_bin_count(),\n                multiple=\"dodge\",\n                hue=\"species\",\n            )\n            seaborn_plot.set_title(\"Species Seaborn Histogram\")\n            seaborn_plot.set_ylabel(\"Measurement\")\n\n    with ui.card(full_screen=True):\n        ui.h2(\"Species Plotly Scatterplot\")\n\n        @render_plotly\n        def plotly_scatterplot():\n            return px.scatter(\n                filtered_data(),\n                title=\"Plotly Scatterplot\",\n                x=input.selected_attribute(),\n                y=input.second_selected_attribute(),\n                color=\"species\",\n                symbol=\"species\",\n            )\n            # --------------------------------------------------------\n\n    # Reactive calculations and effects\n    # --------------------------------------------------------\n\n    # Add a reactive calculation to filter the data\n    # By decorating the function with @reactive, we can use the function to filter the data\n    # The function will be called whenever an input functions used to generate that output changes.\n    # Any output that depends on the reactive function (e.g., filtered_data()) will be updated when the data changes.\n\n    @reactive.calc\n    def filtered_data():\n        return penguins_df[penguins_df[\"species\"].isin(input.selected_species_list())]\n", "type": "text"}]